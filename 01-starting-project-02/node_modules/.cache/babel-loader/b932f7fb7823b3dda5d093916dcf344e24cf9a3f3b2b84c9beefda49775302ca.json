{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst initialStateCart = {\n  products: [],\n  total: 0\n};\nconst cartReducerFunction = createSlice({\n  name: 'cart',\n  initialState: initialStateCart,\n  reducers: {\n    increment(state, action) {\n      const existingProductIndex = state.products.findIndex(item => item.title === action.payload.title);\n      if (existingProductIndex !== -1) {\n        const updatedProducts = [...state.products];\n        updatedProducts[existingProductIndex].quantity += action.payload.quantity;\n        state.products = updatedProducts;\n      } else {\n        state.products = [...state.products, action.payload];\n      }\n      state.total += action.payload.price * action.payload.quantity;\n      console.log(state.products);\n      console.log(state.total);\n    },\n    decrement(state, action) {\n      state.products = state.products.filter(product => product.name != action.payload.id);\n    },\n    incrementQuantity(state, action) {\n      const existingProductIndex = state.products.findIndex(item => item.title === action.payload.id);\n      console.log(\"inside incremenQuantity \", existingProductIndex);\n      if (existingProductIndex !== -1) {\n        const updatedProducts = [...state.products];\n        updatedProducts[existingProductIndex].quantity += 1;\n        state.products = updatedProducts;\n        state.total += updatedProducts.price;\n        console.log(\"updated state \", state.products, state.total);\n      }\n    },\n    decrementQuantity(state, action) {}\n  }\n});\nexport const cartActions = cartReducerFunction.actions;\nexport const cartReducer = cartReducerFunction.reducer;","map":{"version":3,"names":["configureStore","createSlice","initialStateCart","products","total","cartReducerFunction","name","initialState","reducers","increment","state","action","existingProductIndex","findIndex","item","title","payload","updatedProducts","quantity","price","console","log","decrement","filter","product","id","incrementQuantity","decrementQuantity","cartActions","actions","cartReducer","reducer"],"sources":["/Users/akshaydatir/Desktop/Web - Devlopment/ReactJs/RectApp/Teaching/Redux/01-starting-project-02/src/store/cart.js"],"sourcesContent":["\n\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\n\n\nconst initialStateCart= {\n    products:[],\n    total:0\n}\n\nconst cartReducerFunction = createSlice({\n    name:'cart',\n    initialState:initialStateCart,\n    reducers :{\n        increment(state, action){\n\n            const existingProductIndex = state.products.findIndex(item => item.title === action.payload.title);\n            \n            if (existingProductIndex !== -1) {\n             \n                const updatedProducts = [...state.products];\n                updatedProducts[existingProductIndex].quantity += action.payload.quantity;\n                state.products = updatedProducts;\n            } else {\n               \n                state.products = [...state.products, action.payload];\n            }\n\n\n            state.total += action.payload.price * action.payload.quantity;\n            \n            console.log(state.products);\n            console.log(state.total);\n        },\n        decrement(state,action){\n            state.products = state.products.filter(product => product.name != action.payload.id);\n        },\n        incrementQuantity(state,action){\n            const existingProductIndex = state.products.findIndex(item => item.title === action.payload.id);\n            console.log(\"inside incremenQuantity \",existingProductIndex);\n            if (existingProductIndex !== -1) {\n                const updatedProducts = [...state.products];\n                updatedProducts[existingProductIndex].quantity += 1;\n                state.products = updatedProducts;\n                state.total += updatedProducts.price\n                console.log(\"updated state \",state.products, state.total);\n            }\n           \n\n        },\n        decrementQuantity(state,action){\n\n        }\n    }\n});\n\n\nexport const cartActions = cartReducerFunction.actions;\n\nexport const cartReducer =  cartReducerFunction.reducer;"],"mappings":"AAEA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAG9D,MAAMC,gBAAgB,GAAE;EACpBC,QAAQ,EAAC,EAAE;EACXC,KAAK,EAAC;AACV,CAAC;AAED,MAAMC,mBAAmB,GAAGJ,WAAW,CAAC;EACpCK,IAAI,EAAC,MAAM;EACXC,YAAY,EAACL,gBAAgB;EAC7BM,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAEC,MAAM,EAAC;MAEpB,MAAMC,oBAAoB,GAAGF,KAAK,CAACP,QAAQ,CAACU,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,KAAKJ,MAAM,CAACK,OAAO,CAACD,KAAK,CAAC;MAElG,IAAIH,oBAAoB,KAAK,CAAC,CAAC,EAAE;QAE7B,MAAMK,eAAe,GAAG,CAAC,GAAGP,KAAK,CAACP,QAAQ,CAAC;QAC3Cc,eAAe,CAACL,oBAAoB,CAAC,CAACM,QAAQ,IAAIP,MAAM,CAACK,OAAO,CAACE,QAAQ;QACzER,KAAK,CAACP,QAAQ,GAAGc,eAAe;MACpC,CAAC,MAAM;QAEHP,KAAK,CAACP,QAAQ,GAAG,CAAC,GAAGO,KAAK,CAACP,QAAQ,EAAEQ,MAAM,CAACK,OAAO,CAAC;MACxD;MAGAN,KAAK,CAACN,KAAK,IAAIO,MAAM,CAACK,OAAO,CAACG,KAAK,GAAGR,MAAM,CAACK,OAAO,CAACE,QAAQ;MAE7DE,OAAO,CAACC,GAAG,CAACX,KAAK,CAACP,QAAQ,CAAC;MAC3BiB,OAAO,CAACC,GAAG,CAACX,KAAK,CAACN,KAAK,CAAC;IAC5B,CAAC;IACDkB,SAASA,CAACZ,KAAK,EAACC,MAAM,EAAC;MACnBD,KAAK,CAACP,QAAQ,GAAGO,KAAK,CAACP,QAAQ,CAACoB,MAAM,CAACC,OAAO,IAAIA,OAAO,CAAClB,IAAI,IAAIK,MAAM,CAACK,OAAO,CAACS,EAAE,CAAC;IACxF,CAAC;IACDC,iBAAiBA,CAAChB,KAAK,EAACC,MAAM,EAAC;MAC3B,MAAMC,oBAAoB,GAAGF,KAAK,CAACP,QAAQ,CAACU,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,KAAKJ,MAAM,CAACK,OAAO,CAACS,EAAE,CAAC;MAC/FL,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAACT,oBAAoB,CAAC;MAC5D,IAAIA,oBAAoB,KAAK,CAAC,CAAC,EAAE;QAC7B,MAAMK,eAAe,GAAG,CAAC,GAAGP,KAAK,CAACP,QAAQ,CAAC;QAC3Cc,eAAe,CAACL,oBAAoB,CAAC,CAACM,QAAQ,IAAI,CAAC;QACnDR,KAAK,CAACP,QAAQ,GAAGc,eAAe;QAChCP,KAAK,CAACN,KAAK,IAAIa,eAAe,CAACE,KAAK;QACpCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAACX,KAAK,CAACP,QAAQ,EAAEO,KAAK,CAACN,KAAK,CAAC;MAC7D;IAGJ,CAAC;IACDuB,iBAAiBA,CAACjB,KAAK,EAACC,MAAM,EAAC,CAE/B;EACJ;AACJ,CAAC,CAAC;AAGF,OAAO,MAAMiB,WAAW,GAAGvB,mBAAmB,CAACwB,OAAO;AAEtD,OAAO,MAAMC,WAAW,GAAIzB,mBAAmB,CAAC0B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}